.pragma selector-save-my-code

.version sol 0.47.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
TRUE
SETGLOB 6
;; end constructor protection
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TvmCell
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
LDREF
ENDS
;; param: addrOwner
;; param: codeIndex
;; param: indexDeployValue
;; param: json
;; param: dataName
; constructor Nft
GETGLOB 1
PUSHREF {
	DUP
	SETGLOB 1
	BLESS
	JMPX
}
NEWC
STSLICECONST x8adb35
STREF
STSLICE
ENDC
CALLREF {
	CTOS
	PUSH S0
	PUSHSLICE x8adb35
	SDEQ
	PUSHREFCONT {
		PLDREFIDX 1
		CTOS
		CALLREF {
			
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
		}
	}
	PUSHREFCONT {
		
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
	}
	IFELSE
}
;; decl: optSalt
;; push identifier optSalt
DUP
ISNULL
THROWIF 101
;; push identifier optSalt
BLKPUSH 2, 0
ISNULL
THROWIF 63
CTOS
LDMSGADDR
; colValue
DROP
;; decl: addrRoot
;; get member sender
GETGLOB 9
;; push identifier addrRoot
PUSH S1
SDEQ
THROWIFNOT 102
;; get member value
DEPTH
ADDCONST -2
PICK
;; >=
;; push identifier _indexDeployValue
GETGLOB 16
;; *
MULCONST 2
UFITS 128
GEQ
THROWIFNOT 103
ACCEPT
; expValue
; end expValue
;; push identifier addrRoot
DUP
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier addrOwner
PUSH S6
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier codeIndex
PUSH S5
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier indexDeployValue
PUSH S4
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier json
PUSH S3
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
;; push identifier dataName
PUSH S2
; colValue
SETGLOB 18
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
GETGLOB 19
PUSHINT 1965481664
;; ^
PUSHINT 1795764025
XOR
;; ^
PUSHINT 502498758
XOR
;; ^
PUSHINT 1643665857
XOR
;; ^
PUSHINT 313202631
XOR
;; ^
PUSHINT 111879361
XOR
;; ^
PUSHINT 790177674
XOR
;; ^
PUSHINT 297752426
XOR
;; bytes4
; end expValue
XCHG S2
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 19
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
;; bytes4
PUSHINT 1118824496
GETGLOB 19
; end expValue
ROT
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 19
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
;; bytes4
PUSHINT 839183401
GETGLOB 19
; end expValue
ROT
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 19
; end colValue
;; push identifier addrOwner
PUSH S6
;; emit TokenWasMinted
PUSHSLICE xc00000000000000000000000001240b639
NEWC
STSLICE
STSLICE
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier addrOwner
PUSH S6
CALLREF {
	CALL $_deployIndex_internal_macro$
}
; end constructor Nft
BLKDROP 7
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro supportsInterface
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
LDU 32
ENDS
;; param: interfaceID
; function supportsInterface
;; return
;; index
;; push identifier interfaceID
DUP
;; push identifier _supportedInterfaces
GETGLOB 19
PUSHINT 32
DICTUGET
PUSHCONT {
	PLDI 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
; end function supportsInterface
NIP
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002c813b0a6_
	STSLICER
	STI 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STI 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getName
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
CALLREF {
	CALL $getName_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000030abfa0c2_
	STSLICER
	STREF
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STREF
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getName_internal
.type	getName_internal, @function
CALL $getName_internal_macro$

.macro getName_internal_macro
;; ret param: dataName
PUSHREF {
}
; function getName
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _dataName
DROP
GETGLOB 18
; end function getName

.macro transferOwnership
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDDICTQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDDICT
}
IFNOT
ENDS
;; param: sendGasToAddr
;; param: addrTo
;; param: callbacks
CALLREF {
	CALL $transferOwnership_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	transferOwnership_internal
.type	transferOwnership_internal, @function
CALL $transferOwnership_internal_macro$

.macro transferOwnership_internal_macro
;; param: sendGasToAddr
;; param: addrTo
;; param: callbacks
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIFNOT 104
; function transferOwnership
;; get member value
DEPTH
ADDCONST -2
PICK
;; >=
;; push identifier _indexDeployValue
GETGLOB 16
;; *
MULCONST 2
UFITS 128
GEQ
THROWIFNOT 103
;; get member value
;; push identifier addrTo
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 101
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
;; push identifier _addrOwner
GETGLOB 13
;; decl: addrOwner
; expValue
; end expValue
;; get member value
;; push identifier sendGasToAddr
PUSH S3
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
PUSHCONT {
	;; push identifier sendGasToAddr
	PUSH S3
}
PUSHCONT {
	;; get member sender
	GETGLOB 9
}
IFELSE
; colValue
POP S4
; end colValue
;; push identifier addrTo
;; push identifier sendGasToAddr
PUSH2 S2, S3
CALLREF {
	CALL $_transfer_internal_macro$
}
;; push identifier addrTo
;; push identifier addrOwner
PUSH2 S2, S0
;; emit OwnershipTransferred
PUSHSLICE xc0000000000000000000000001
NEWC
STSLICE
ROTREV
NEWC
STSLICECONST x6115f072
STSLICE
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
NULL
;; decl: callbackToGasOwner
;; push identifier callbacks
PUSH2 S2, S2
PUSHINT 267
DICTMIN
PUSHREFCONT {
	DUP
	ROT
	LDU 128
	;; decode TvmCell
	LDREF
	ENDS
	TUPLE 2
}
PUSHCONT {
	NULL
	NULL
	NULL
}
IFELSE
PUSHCONT {
	PUSH S2
	ISNULL
	NOT
}
PUSHCONT {
	;; if
	;; get member value
	;; push identifier dest
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	PUSHCONT {
		;; if
		;; push identifier sendGasToAddr
		;; push identifier dest
		PUSH2 S8, S1
		SDEQ
		NOT
		PUSHCONT {
			;; Remote call ITokenTransferCallback.tokenTransferCallback
			;; get member payload
			;; push identifier p
			DUP
			INDEX 1
			;; push identifier sendGasToAddr
			PUSH S9
			;; push identifier _addrRoot
			GETGLOB 12
			;; push identifier addrTo
			;; push identifier addrOwner
			PUSH2 S10, S8
			;; push identifier _id
			GETGLOB 11
			;; get member value
			;; push identifier p
			PUSH S6
			INDEX 0
			;; push identifier dest
			PUSH S8
			FALSE
			NEWC
			STSLICECONST x6_
			STI 1
			PUSHINT 3
			STZEROES
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 1
			STUR 107
			BLKSWAP 6, 1
			NEWC
			STSLICECONST x27e7ef28
			STU 256
			STSLICE
			BLKSWAP 4, 1
			NEWC
			STSLICE
			BLKSWAP 3, 1
			NEWC
			STSLICE
			ROTREV
			NEWC
			STSLICE
			STREF
			STBREFR
			STBREFR
			STBREFR
			STBREFR
			ENDC
			PUSHINT 0
			SENDRAWMSG
		}
		PUSHCONT {
			; expValue
			; end expValue
			;; get member payload
			;; push identifier p
			DUP
			INDEX 1
			; colValue
			POP S5
			; end colValue
		}
		IFELSE
		;; end if
	}
	IF
	;; end if
	PUSH2 S2, S3
	PUSHINT 267
	DICTGETNEXT
	PUSHREFCONT {
		DUP
		ROT
		LDU 128
		;; decode TvmCell
		LDREF
		ENDS
		TUPLE 2
	}
	PUSHCONT {
		NULL
		NULL
		NULL
	}
	IFELSE
	BLKDROP2 3, 3
}
WHILE
BLKDROP 4
; end for
;; if
;; get member value
;; push identifier sendGasToAddr
PUSH S4
PARSEMSGADDR
INDEX 3
PLDU 256
PUSHCONT {
	;; if
	;; push identifier callbackToGasOwner
	DUP
	ISNULL
	NOT
	PUSHCONT {
		;; Remote call ITokenTransferCallback.tokenTransferCallback
		;; push identifier callbackToGasOwner
		BLKPUSH 2, 0
		ISNULL
		THROWIF 63
		;; push identifier sendGasToAddr
		PUSH S5
		;; push identifier _addrRoot
		GETGLOB 12
		;; push identifier addrTo
		;; push identifier addrOwner
		PUSH2 S6, S4
		;; push identifier _id
		GETGLOB 11
		;; push identifier sendGasToAddr
		PUSH S10
		FALSE
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		PUSHINT 1
		STUR 111
		BLKSWAP 6, 1
		NEWC
		STSLICECONST x27e7ef28
		STU 256
		STSLICE
		BLKSWAP 4, 1
		NEWC
		STSLICE
		BLKSWAP 3, 1
		NEWC
		STSLICE
		ROTREV
		NEWC
		STSLICE
		STREF
		STBREFR
		STBREFR
		STBREFR
		STBREFR
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	PUSHCONT {
		;; transfer()
		;; push identifier sendGasToAddr
		PUSH S4
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 111
		STZEROES
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	IFELSE
	;; end if
}
IF
;; end if
; end function transferOwnership
; end modifier onlyManager
BLKDROP 5

.globl	_transfer_internal
.type	_transfer_internal, @function
CALL $_transfer_internal_macro$

.macro _transfer_internal_macro
;; param: to
;; param: sendGasToAddr
; function _transfer
;; get member value
;; push identifier to
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 101
;; push identifier sendGasToAddr
DUP
CALLREF {
	CALL $_destructIndex_internal_macro$
}
; expValue
; end expValue
;; push identifier to
PUSH S1
; colValue
SETGLOB 13
; end colValue
;; push identifier sendGasToAddr
DUP
CALLREF {
	CALL $_deployIndex_internal_macro$
}
; end function _transfer
DROP2

.globl	_deployIndex_internal
.type	_deployIndex_internal, @function
CALL $_deployIndex_internal_macro$

.macro _deployIndex_internal_macro
;; param: sendGasToAddr
; function _deployIndex
;; push identifier _addrRoot
GETGLOB 12
;; push identifier _addrOwner
GETGLOB 13
CALLREF {
	CALL $_buildIndexCode_internal_macro$
}
;; decl: codeIndexOwner
;; push identifier codeIndexOwner
DUP
MYADDR
CALLREF {
	CALL $_buildIndexState_internal_macro$
}
;; decl: stateIndexOwner
;; push identifier _indexDeployValue
GETGLOB 16
;; -
PUSHINT 100000000
SUB
UFITS 128
;; push identifier sendGasToAddr
PUSH S3
;; push identifier _addrRoot
GETGLOB 12
;; push identifier stateIndexOwner
PUSH2 S3, S3
HASHCU
NEWC
STSLICECONST x801_
STU 256
BLKSWAP 4, 1
;; push identifier _indexDeployValue
GETGLOB 16
PUSH S5
NEWC
STSLICECONST x62_
STB
SWAP
STGRAMS
PUSHSLICE x000000000000000000000000007_
STSLICER
STREF
STSLICECONST 1
BLKSWAP 3, 1
NEWC
STSLICECONST x454f13ec
STSLICE
ROTREV
NEWC
STSLICE
STU 128
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; push identifier _addrOwner
GETGLOB 13
CALLREF {
	CALL $_buildIndexCode_internal_macro$
}
;; decl: codeIndexOwnerRoot
;; push identifier codeIndexOwnerRoot
DUP
MYADDR
CALLREF {
	CALL $_buildIndexState_internal_macro$
}
;; decl: stateIndexOwnerRoot
;; push identifier _indexDeployValue
GETGLOB 16
;; -
PUSHINT 100000000
SUB
UFITS 128
;; push identifier sendGasToAddr
PUSH S5
;; push identifier _addrRoot
GETGLOB 12
;; push identifier stateIndexOwnerRoot
PUSH2 S3, S3
HASHCU
NEWC
STSLICECONST x801_
STU 256
BLKSWAP 4, 1
;; push identifier _indexDeployValue
GETGLOB 16
PUSH S5
NEWC
STSLICECONST x62_
STB
SWAP
STGRAMS
PUSHSLICE x000000000000000000000000007_
STSLICER
STREF
STSLICECONST 1
BLKSWAP 3, 1
NEWC
STSLICECONST x454f13ec
STSLICE
ROTREV
NEWC
STSLICE
STU 128
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function _deployIndex
BLKDROP 6

.globl	_destructIndex_internal
.type	_destructIndex_internal, @function
CALL $_destructIndex_internal_macro$

.macro _destructIndex_internal_macro
;; param: sendGasToAddr
; function _destructIndex
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
MYADDR
;; push identifier _addrOwner
GETGLOB 13
CALLREF {
	CALL $resolveIndex_internal_macro$
}
;; decl: oldIndexOwner
;; Remote call IIndex.destruct
;; push identifier sendGasToAddr
PUSH S1
;; push identifier _indexDestroyValue
GETGLOB 17
;; push identifier oldIndexOwner
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
SWAP
NEWC
STSLICECONST x03a3add7
STSLICE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier _addrRoot
GETGLOB 12
MYADDR
;; push identifier _addrOwner
GETGLOB 13
CALLREF {
	CALL $resolveIndex_internal_macro$
}
;; decl: oldIndexOwnerRoot
;; Remote call IIndex.destruct
;; push identifier sendGasToAddr
PUSH S2
;; push identifier _indexDestroyValue
GETGLOB 17
;; push identifier oldIndexOwnerRoot
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
SWAP
NEWC
STSLICECONST x03a3add7
STSLICE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function _destructIndex
BLKDROP 3

.macro setManager
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: manager
;; param: payload
CALLREF {
	CALL $setManager_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setManager_internal
.type	setManager_internal, @function
CALL $setManager_internal_macro$

.macro setManager_internal_macro
;; param: manager
;; param: payload
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIFNOT 104
; function setManager
;; get member value
DEPTH
ADDCONST -2
PICK
THROWIFNOT 100
ACCEPT
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
; expValue
; end expValue
;; push identifier manager
PUSH S1
; colValue
SETGLOB 14
; end colValue
;; Remote call IManager.setManagerCallback
;; push identifier payload
;; push identifier manager
PUSH2 S0, S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x0000000000000000000000000000cfbc6655_
STSLICER
STREF
ENDC
PUSHINT 128
SENDRAWMSG
; end function setManager
; end modifier onlyManager
DROP2

.macro returnOwnership
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $returnOwnership_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	returnOwnership_internal
.type	returnOwnership_internal, @function
CALL $returnOwnership_internal_macro$

.macro returnOwnership_internal_macro
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIFNOT 104
; function returnOwnership
;; push identifier _addrManager
GETGLOB 14
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIF 100
ACCEPT
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
;; push identifier _addrManager
GETGLOB 14
;; decl: manager
; expValue
; end expValue
;; push identifier _addrOwner
GETGLOB 13
; colValue
SETGLOB 14
; end colValue
;; Remote call IManager.resetManagerCallback
;; push identifier manager
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x000000000000000000000000000068cb3c17_
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function returnOwnership
; end modifier onlyManager

.macro setIndexDeployValue
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: indexDeployValue
CALLREF {
	CALL $setIndexDeployValue_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setIndexDeployValue_internal
.type	setIndexDeployValue_internal, @function
CALL $setIndexDeployValue_internal_macro$

.macro setIndexDeployValue_internal_macro
;; param: indexDeployValue
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIFNOT 104
; function setIndexDeployValue
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
; expValue
; end expValue
;; push identifier indexDeployValue
DUP
; colValue
SETGLOB 16
; end colValue
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
SENDRAWMSG
; end function setIndexDeployValue
; end modifier onlyManager
DROP

.macro setIndexDestroyValue
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: indexDestroyValue
CALLREF {
	CALL $setIndexDestroyValue_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setIndexDestroyValue_internal
.type	setIndexDestroyValue_internal, @function
CALL $setIndexDestroyValue_internal_macro$

.macro setIndexDestroyValue_internal_macro
;; param: indexDestroyValue
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 13
SDEQ
THROWIFNOT 104
; function setIndexDestroyValue
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
; expValue
; end expValue
;; push identifier indexDestroyValue
DUP
; colValue
SETGLOB 17
; end colValue
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
SENDRAWMSG
; end function setIndexDestroyValue
; end modifier onlyManager
DROP

.macro getInfo
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
;; ret param: id
PUSHINT 0
;; ret param: addrOwner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrCollection
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrManager
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getInfo
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _id
GETGLOB 11
;; push identifier _addrOwner
GETGLOB 13
;; push identifier _addrRoot
GETGLOB 12
;; push identifier _addrManager
GETGLOB 14
BLKDROP2 4, 4
; end function getInfo
;; emitting 4 value(s)
PUSH S4
PUSHCONT {
	PUSH S6
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	REVERSE 4, 1
	BLKSWAP 4, 1
	NEWC
	STSLICECONST x91bf576a
	STU 256
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 1
	STUR 106
	REVERSE 4, 1
	BLKSWAP 4, 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	STU 256
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getJsonInfo
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
;; ret param: json
PUSHREF {
}
; function getJsonInfo
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _json
DROP
GETGLOB 15
; end function getJsonInfo
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000027138c166_
	STSLICER
	STREF
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STREF
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getIndexDeployValue
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
CALLREF {
	CALL $getIndexDeployValue_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000387e16706_
	STSLICER
	STU 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STU 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getIndexDeployValue_internal
.type	getIndexDeployValue_internal, @function
CALL $getIndexDeployValue_internal_macro$

.macro getIndexDeployValue_internal_macro
; function getIndexDeployValue
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _indexDeployValue
GETGLOB 16
; end function getIndexDeployValue

.macro getIndexDestroyValue
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
CALLREF {
	CALL $getIndexDestroyValue_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000024aac5f1e_
	STSLICER
	STU 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STU 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getIndexDestroyValue_internal
.type	getIndexDestroyValue_internal, @function
CALL $getIndexDestroyValue_internal_macro$

.macro getIndexDestroyValue_internal_macro
; function getIndexDestroyValue
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _indexDestroyValue
GETGLOB 17
; end function getIndexDestroyValue

.macro resolveCodeHashIndex
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: addrRoot
;; param: addrOwner
CALLREF {
	CALL $resolveCodeHashIndex_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003ddae6a02_
	STSLICER
	STU 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	resolveCodeHashIndex_internal
.type	resolveCodeHashIndex_internal, @function
CALL $resolveCodeHashIndex_internal_macro$

.macro resolveCodeHashIndex_internal_macro
;; param: addrRoot
;; param: addrOwner
;; ret param: codeHashIndex
PUSHINT 0
; function resolveCodeHashIndex
;; return
;; push identifier addrRoot
;; push identifier addrOwner
BLKPUSH 2, 2
CALLREF {
	CALL $_buildIndexCode_internal_macro$
}
HASHCU
NIP
; end function resolveCodeHashIndex
BLKDROP2 2, 1

.macro resolveIndex
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: addrRoot
;; param: addrNft
;; param: addrOwner
CALLREF {
	CALL $resolveIndex_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	SWAP
	NEWC
	STSLICECONST x9d7864c9
	STSLICE
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	resolveIndex_internal
.type	resolveIndex_internal, @function
CALL $resolveIndex_internal_macro$

.macro resolveIndex_internal_macro
;; param: addrRoot
;; param: addrNft
;; param: addrOwner
;; ret param: addrIndex
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function resolveIndex
;; push identifier addrRoot
;; push identifier addrOwner
PUSH2 S3, S1
CALLREF {
	CALL $_buildIndexCode_internal_macro$
}
;; decl: code
;; push identifier code
;; push identifier addrNft
PUSH2 S0, S3
CALLREF {
	CALL $_buildIndexState_internal_macro$
}
;; decl: state
;; push identifier state
;; decl: hashState
;; address.makeAddrStd()
;; push identifier hashState
; expValue
; end expValue
; colValue
; end colValue
HASHCU
PUSHINT 0
NEWC
STSLICECONST x9_
STI 8
STU 256
ENDC
CTOS
POP S2
DROP
; end function resolveIndex
BLKDROP2 3, 1

.globl	_buildIndexCode_internal
.type	_buildIndexCode_internal, @function
CALL $_buildIndexCode_internal_macro$

.macro _buildIndexCode_internal_macro
;; param: addrRoot
;; param: addrOwner
; function _buildIndexCode
;; decl: salt
; expValue
; end expValue
;; push identifier addrRoot
; colValue
PUSH S1
NEWC
STSLICE
; end colValue
; expValue
; end expValue
;; push identifier addrOwner
DUP2
STSLICE
; colValue
NIP
; end colValue
;; return
;; push identifier _codeIndex
GETGLOB 10
CTOS
;; push identifier salt
PUSH S1
ENDC
CALLREF {
	PUSH S1
	PUSHSLICE x8adb35
	SDEQ
	PUSHREFCONT {
		SWAP      ; salt sliceCode
		LDREF
		LDREF
		DROP         ; salt selfCallCode usualSelector
		XCHG S1, S2  ; selfCallCode salt usualSelector
		CTOS         ; selfCallCode salt usualSelector
		CALLREF {
			
			LDREFRTOS  ; selfCallCode salt restUsualSelector intSelector
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT     ; selfCallCode salt restUsualSelector dict intSelector
			LDU 10
			NIP
			DUP
			SREFS      ; selfCallCode salt restUsualSelector dict intSelector refs
			PUSHCONT {
				LDREF
			}
			PUSHCONT {
				PUSHREF {
				}
				SWAP
			}
			IFELSE
		                ; selfCallCode salt restUsualSelector dict version intSelector
			PUSHSLICE xF4A1
			SDBEGINSX
			DROP
			            ; selfCallCode salt restUsualSelector dict version
			SWAP        ; selfCallCode salt restUsualSelector version dict
			NEWC        ; selfCallCode salt restUsualSelector version dict builder
			STSLICECONST xF4A4_ ; DICTPUSHCONST
			STDICT
			PUSHINT 32
			STUR 10
			STSLICECONST xF4A1 ; DICTUGETJMP
			STREF       ; selfCallCode salt restUsualSelector builder
			XCHG S1, S2 ; selfCallCode restUsualSelector salt builder
			STREF       ; selfCallCode restUsualSelector builder
			NEWC        ; selfCallCode restUsualSelector builder usualBuilder
			STBREF      ; selfCallCode restUsualSelector usualBuilder
			STSLICE     ; selfCallCode usualBuilder
		}
		NEWC        ; selfCallCode usualBuilder mainBuilder
		STSLICECONST x8adb35
		XCHG S1, S2 ; usualBuilder selfCallCode mainBuilder
		STREF
		STBREF
		ENDC
	}
	PUSHREFCONT {
		SWAP
		CALLREF {
			
			LDREFRTOS  ; selfCallCode salt restUsualSelector intSelector
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT     ; selfCallCode salt restUsualSelector dict intSelector
			LDU 10
			NIP
			DUP
			SREFS      ; selfCallCode salt restUsualSelector dict intSelector refs
			PUSHCONT {
				LDREF
			}
			PUSHCONT {
				PUSHREF {
				}
				SWAP
			}
			IFELSE
		                ; selfCallCode salt restUsualSelector dict version intSelector
			PUSHSLICE xF4A1
			SDBEGINSX
			DROP
			            ; selfCallCode salt restUsualSelector dict version
			SWAP        ; selfCallCode salt restUsualSelector version dict
			NEWC        ; selfCallCode salt restUsualSelector version dict builder
			STSLICECONST xF4A4_ ; DICTPUSHCONST
			STDICT
			PUSHINT 32
			STUR 10
			STSLICECONST xF4A1 ; DICTUGETJMP
			STREF       ; selfCallCode salt restUsualSelector builder
			XCHG S1, S2 ; selfCallCode restUsualSelector salt builder
			STREF       ; selfCallCode restUsualSelector builder
			NEWC        ; selfCallCode restUsualSelector builder usualBuilder
			STBREF      ; selfCallCode restUsualSelector usualBuilder
			STSLICE     ; selfCallCode usualBuilder
		}
		ENDC
	}
	IFELSE
}
NIP
; end function _buildIndexCode
BLKDROP2 2, 1

.globl	_buildIndexState_internal
.type	_buildIndexState_internal, @function
CALL $_buildIndexState_internal_macro$

.macro _buildIndexState_internal_macro
;; param: code
;; param: addrNft
; function _buildIndexState
;; return
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier addrNft
PUSH S1
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier code
PUSH S2
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
; end function _buildIndexState
BLKDROP2 2, 1

.macro c7_to_c4
GETGLOB 19
GETGLOB 18
GETGLOB 17
GETGLOB 16
GETGLOB 15
GETGLOB 14
GETGLOB 13
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STI 1
STREF
STU 256
BLKSWAP 8, 1
NEWC
STSLICE
BLKSWAP 7, 1
NEWC
STSLICE
BLKSWAP 6, 1
NEWC
STSLICE
STREF
STU 128
STU 128
STREF
STDICT
STBREFR
STBREFR
STBREFR
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDI 1       ; pubkey [timestamp] constructor_flag memory
;; decode TvmCell
LDREF
LDU 256
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
LDREF
LDU 128
LDU 128
LDREF
LDDICT
ENDS
SETGLOB 19
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; pubkey
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHREFCONT {
	CALL $c4_to_c7$
}
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT   ; D
	; init _codeIndex
	PUSHREF {
	}
	SETGLOB 10
	; init _id
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; init _addrRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 12
	; init _addrOwner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init _addrManager
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init _json
	PUSHREF {
	}
	SETGLOB 15
	; init _indexDeployValue
	PUSHINT 0
	SETGLOB 16
	; init _indexDestroyValue
	PUSHINT 0
	SETGLOB 17
	; init _dataName
	PUSHREF {
	}
	SETGLOB 18
	; init _supportedInterfaces
	NEWDICT
	SETGLOB 19
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	;; init state var: _addrManager
	;; push identifier _addrOwner
	GETGLOB 13
	SETGLOB 14
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro public_function_selector
DUP
PUSHINT 313202631
LEQ
IFJMPREF {
	DUP
	PUSHINT 106228883
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 111879361
	EQUAL
	IFJMPREF {
		CALL $setManager$
	}
	DUP
	PUSHINT 297752426
	EQUAL
	IFJMPREF {
		CALL $getInfo$
	}
	DUP
	PUSHINT 313202631
	EQUAL
	IFJMPREF {
		CALL $getIndexDestroyValue$
	}
}
DUP
PUSHINT 790177674
LEQ
IFJMPREF {
	DUP
	PUSHINT 474886233
	EQUAL
	IFJMPREF {
		CALL $getJsonInfo$
	}
	DUP
	PUSHINT 494429385
	EQUAL
	IFJMPREF {
		CALL $resolveIndex$
	}
	DUP
	PUSHINT 502498758
	EQUAL
	IFJMPREF {
		CALL $transferOwnership$
	}
	DUP
	PUSHINT 790177674
	EQUAL
	IFJMPREF {
		CALL $returnOwnership$
	}
}
DUP
PUSHINT 1795764025
LEQ
IFJMPREF {
	DUP
	PUSHINT 839183401
	EQUAL
	IFJMPREF {
		CALL $supportsInterface$
	}
	DUP
	PUSHINT 1118824496
	EQUAL
	IFJMPREF {
		CALL $getName$
	}
	DUP
	PUSHINT 1643665857
	EQUAL
	IFJMPREF {
		CALL $getIndexDeployValue$
	}
	DUP
	PUSHINT 1795764025
	EQUAL
	IFJMPREF {
		CALL $setIndexDeployValue$
	}
}
DUP
PUSHINT 2003540608
LEQ
IFJMPREF {
	DUP
	PUSHINT 1965481664
	EQUAL
	IFJMPREF {
		CALL $setIndexDestroyValue$
	}
	DUP
	PUSHINT 2003540608
	EQUAL
	IFJMPREF {
		CALL $resolveCodeHashIndex$
	}
}
