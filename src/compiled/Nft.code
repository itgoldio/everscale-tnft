.pragma selector-save-my-code

.version sol 0.47.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
TRUE
SETGLOB 6
;; end constructor protection
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
LDREF
ENDS
;; param: addrOwner
;; param: json
;; param: dataName
; constructor Nft
GETGLOB 1
PUSHREF {
	DUP
	SETGLOB 1
	BLESS
	JMPX
}
NEWC
STSLICECONST x8adb35
STREF
STSLICE
ENDC
CALLREF {
	CTOS
	PUSH S0
	PUSHSLICE x8adb35
	SDEQ
	PUSHREFCONT {
		PLDREFIDX 1
		CTOS
		CALLREF {
			
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
		}
	}
	PUSHREFCONT {
		
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
	}
	IFELSE
}
;; decl: optSalt
;; push identifier optSalt
DUP
ISNULL
THROWIF 101
;; push identifier optSalt
BLKPUSH 2, 0
ISNULL
THROWIF 63
CTOS
LDMSGADDR
; colValue
DROP
;; decl: addrRoot
;; get member sender
GETGLOB 9
;; push identifier addrRoot
PUSH S1
SDEQ
THROWIFNOT 102
ACCEPT
; expValue
; end expValue
;; push identifier addrRoot
DUP
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier addrOwner
PUSH S4
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier json
PUSH S3
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
;; push identifier dataName
PUSH S2
; colValue
SETGLOB 15
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
GETGLOB 16
PUSHINT 502498758
;; ^
PUSHINT 111879361
XOR
;; ^
PUSHINT 790177674
XOR
;; ^
PUSHINT 297752426
XOR
;; bytes4
; end expValue
XCHG S2
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 16
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
;; bytes4
PUSHINT 1118824496
GETGLOB 16
; end expValue
ROT
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 16
; end colValue
TRUE
; expValue
;; fetch _supportedInterfaces
;; bytes4
PUSHINT 839183401
GETGLOB 16
; end expValue
ROT
; colValue
NEWC
STI 1
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 16
; end colValue
;; push identifier addrOwner
PUSH S4
;; emit TokenWasMinted
PUSHSLICE xc00000000000000000000000001240b639
NEWC
STSLICE
STSLICE
ENDC
PUSHINT 0
SENDRAWMSG
; end constructor Nft
BLKDROP 5
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro supportsInterface
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
LDU 32
ENDS
;; param: interfaceID
; function supportsInterface
;; return
;; index
;; push identifier interfaceID
DUP
;; push identifier _supportedInterfaces
GETGLOB 16
PUSHINT 32
DICTUGET
PUSHCONT {
	PLDI 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
; end function supportsInterface
NIP
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002c813b0a6_
	STSLICER
	STI 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STI 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getName
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
CALLREF {
	CALL $getName_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000030abfa0c2_
	STSLICER
	STREF
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STREF
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getName_internal
.type	getName_internal, @function
CALL $getName_internal_macro$

.macro getName_internal_macro
;; ret param: dataName
PUSHREF {
}
; function getName
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _dataName
DROP
GETGLOB 15
; end function getName

.macro transferOwnership
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDDICTQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDDICT
}
IFNOT
ENDS
;; param: sendGasToAddr
;; param: addrTo
;; param: callbacks
CALLREF {
	CALL $transferOwnership_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	transferOwnership_internal
.type	transferOwnership_internal, @function
CALL $transferOwnership_internal_macro$

.macro transferOwnership_internal_macro
;; param: sendGasToAddr
;; param: addrTo
;; param: callbacks
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 12
SDEQ
THROWIFNOT 104
; function transferOwnership
;; get member value
;; push identifier addrTo
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 101
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
;; push identifier _addrOwner
GETGLOB 12
;; decl: addrOwner
; expValue
; end expValue
;; get member value
;; push identifier sendGasToAddr
PUSH S3
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
PUSHCONT {
	;; push identifier sendGasToAddr
	PUSH S3
}
PUSHCONT {
	;; get member sender
	GETGLOB 9
}
IFELSE
; colValue
POP S4
; end colValue
;; push identifier addrTo
PUSH S2
CALLREF {
	CALL $_transfer_internal_macro$
}
;; push identifier addrTo
;; push identifier addrOwner
PUSH2 S2, S0
;; emit OwnershipTransferred
PUSHSLICE xc0000000000000000000000001
NEWC
STSLICE
ROTREV
NEWC
STSLICECONST x6115f072
STSLICE
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
NULL
;; decl: callbackToGasOwner
;; push identifier callbacks
PUSH2 S2, S2
PUSHINT 267
DICTMIN
PUSHREFCONT {
	DUP
	ROT
	LDU 128
	;; decode TvmCell
	LDREF
	ENDS
	TUPLE 2
}
PUSHCONT {
	NULL
	NULL
	NULL
}
IFELSE
PUSHCONT {
	PUSH S2
	ISNULL
	NOT
}
PUSHCONT {
	;; if
	;; get member value
	;; push identifier dest
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	PUSHCONT {
		;; if
		;; push identifier sendGasToAddr
		;; push identifier dest
		PUSH2 S8, S1
		SDEQ
		NOT
		PUSHCONT {
			;; Remote call ITokenTransferCallback.tokenTransferCallback
			;; get member payload
			;; push identifier p
			DUP
			INDEX 1
			;; push identifier sendGasToAddr
			PUSH S9
			;; push identifier _addrRoot
			GETGLOB 11
			;; push identifier addrTo
			;; push identifier addrOwner
			PUSH2 S10, S8
			;; push identifier _id
			GETGLOB 10
			;; get member value
			;; push identifier p
			PUSH S6
			INDEX 0
			;; push identifier dest
			PUSH S8
			FALSE
			NEWC
			STSLICECONST x6_
			STI 1
			PUSHINT 3
			STZEROES
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 1
			STUR 107
			BLKSWAP 6, 1
			NEWC
			STSLICECONST x27e7ef28
			STU 256
			STSLICE
			BLKSWAP 4, 1
			NEWC
			STSLICE
			BLKSWAP 3, 1
			NEWC
			STSLICE
			ROTREV
			NEWC
			STSLICE
			STREF
			STBREFR
			STBREFR
			STBREFR
			STBREFR
			ENDC
			PUSHINT 0
			SENDRAWMSG
		}
		PUSHCONT {
			; expValue
			; end expValue
			;; get member payload
			;; push identifier p
			DUP
			INDEX 1
			; colValue
			POP S5
			; end colValue
		}
		IFELSE
		;; end if
	}
	IF
	;; end if
	PUSH2 S2, S3
	PUSHINT 267
	DICTGETNEXT
	PUSHREFCONT {
		DUP
		ROT
		LDU 128
		;; decode TvmCell
		LDREF
		ENDS
		TUPLE 2
	}
	PUSHCONT {
		NULL
		NULL
		NULL
	}
	IFELSE
	BLKDROP2 3, 3
}
WHILE
BLKDROP 4
; end for
;; if
;; get member value
;; push identifier sendGasToAddr
PUSH S4
PARSEMSGADDR
INDEX 3
PLDU 256
PUSHCONT {
	;; if
	;; push identifier callbackToGasOwner
	DUP
	ISNULL
	NOT
	PUSHCONT {
		;; Remote call ITokenTransferCallback.tokenTransferCallback
		;; push identifier callbackToGasOwner
		BLKPUSH 2, 0
		ISNULL
		THROWIF 63
		;; push identifier sendGasToAddr
		PUSH S5
		;; push identifier _addrRoot
		GETGLOB 11
		;; push identifier addrTo
		;; push identifier addrOwner
		PUSH2 S6, S4
		;; push identifier _id
		GETGLOB 10
		;; push identifier sendGasToAddr
		PUSH S10
		FALSE
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		PUSHINT 1
		STUR 111
		BLKSWAP 6, 1
		NEWC
		STSLICECONST x27e7ef28
		STU 256
		STSLICE
		BLKSWAP 4, 1
		NEWC
		STSLICE
		BLKSWAP 3, 1
		NEWC
		STSLICE
		ROTREV
		NEWC
		STSLICE
		STREF
		STBREFR
		STBREFR
		STBREFR
		STBREFR
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	PUSHCONT {
		;; transfer()
		;; push identifier sendGasToAddr
		PUSH S4
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 111
		STZEROES
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	IFELSE
	;; end if
}
IF
;; end if
; end function transferOwnership
; end modifier onlyManager
BLKDROP 5

.globl	_transfer_internal
.type	_transfer_internal, @function
CALL $_transfer_internal_macro$

.macro _transfer_internal_macro
;; param: to
; function _transfer
;; get member value
;; push identifier to
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 101
; expValue
; end expValue
;; push identifier to
; colValue
; end colValue
; end function _transfer
SETGLOB 12

.macro setManager
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: manager
;; param: payload
CALLREF {
	CALL $setManager_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setManager_internal
.type	setManager_internal, @function
CALL $setManager_internal_macro$

.macro setManager_internal_macro
;; param: manager
;; param: payload
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 12
SDEQ
THROWIFNOT 104
; function setManager
;; get member value
DEPTH
ADDCONST -2
PICK
THROWIFNOT 100
ACCEPT
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
; expValue
; end expValue
;; push identifier manager
PUSH S1
; colValue
SETGLOB 13
; end colValue
;; Remote call IManager.setManagerCallback
;; push identifier payload
;; push identifier manager
PUSH2 S0, S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x0000000000000000000000000000cfbc6655_
STSLICER
STREF
ENDC
PUSHINT 128
SENDRAWMSG
; end function setManager
; end modifier onlyManager
DROP2

.macro returnOwnership
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $returnOwnership_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	returnOwnership_internal
.type	returnOwnership_internal, @function
CALL $returnOwnership_internal_macro$

.macro returnOwnership_internal_macro
; modifier onlyManager
;; get member sender
GETGLOB 9
;; push identifier _addrOwner
GETGLOB 12
SDEQ
THROWIFNOT 104
; function returnOwnership
;; push identifier _addrManager
GETGLOB 13
;; push identifier _addrOwner
GETGLOB 12
SDEQ
THROWIF 100
ACCEPT
;; get member value
DEPTH
ADDCONST -2
PICK
PUSHINT 1
RAWRESERVE
;; push identifier _addrManager
GETGLOB 13
;; decl: manager
; expValue
; end expValue
;; push identifier _addrOwner
GETGLOB 12
; colValue
SETGLOB 13
; end colValue
;; Remote call IManager.resetManagerCallback
;; push identifier manager
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x000000000000000000000000000068cb3c17_
STSLICER
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function returnOwnership
; end modifier onlyManager

.macro getInfo
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
;; ret param: id
PUSHINT 0
;; ret param: addrOwner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrCollection
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrManager
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getInfo
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _id
GETGLOB 10
;; push identifier _addrOwner
GETGLOB 12
;; push identifier _addrRoot
GETGLOB 11
;; push identifier _addrManager
GETGLOB 13
BLKDROP2 4, 4
; end function getInfo
;; emitting 4 value(s)
PUSH S4
PUSHCONT {
	PUSH S6
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	REVERSE 4, 1
	BLKSWAP 4, 1
	NEWC
	STSLICECONST x91bf576a
	STU 256
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 1
	STUR 106
	REVERSE 4, 1
	BLKSWAP 4, 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	STU 256
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getJSONInfo
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
;; ret param: json
PUSHREF {
}
; function getJSONInfo
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _json
DROP
GETGLOB 14
; end function getJSONInfo
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003f4d2d832_
	STSLICER
	STREF
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	STREF
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 16
GETGLOB 15
GETGLOB 14
GETGLOB 13
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STI 1
STU 256
BLKSWAP 6, 1
NEWC
STSLICE
BLKSWAP 5, 1
NEWC
STSLICE
BLKSWAP 4, 1
NEWC
STSLICE
STREF
STREF
STDICT
STBREFR
STBREFR
STBREFR
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDI 1       ; pubkey [timestamp] constructor_flag memory
LDU 256
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
LDREF
LDREF
LDDICT
ENDS
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; pubkey
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHREFCONT {
	CALL $c4_to_c7$
}
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT   ; D
	; init _id
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init _addrRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	; init _addrOwner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 12
	; init _addrManager
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init _json
	PUSHREF {
	}
	SETGLOB 14
	; init _dataName
	PUSHREF {
	}
	SETGLOB 15
	; init _supportedInterfaces
	NEWDICT
	SETGLOB 16
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	;; init state var: _addrManager
	;; push identifier _addrOwner
	GETGLOB 12
	SETGLOB 13
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro public_function_selector
DUP
PUSHINT 790177674
LEQ
IFJMPREF {
	DUP
	PUSHINT 111879361
	EQUAL
	IFJMPREF {
		CALL $setManager$
	}
	DUP
	PUSHINT 297752426
	EQUAL
	IFJMPREF {
		CALL $getInfo$
	}
	DUP
	PUSHINT 502498758
	EQUAL
	IFJMPREF {
		CALL $transferOwnership$
	}
	DUP
	PUSHINT 790177674
	EQUAL
	IFJMPREF {
		CALL $returnOwnership$
	}
}
DUP
PUSHINT 2100606476
LEQ
IFJMPREF {
	DUP
	PUSHINT 816736980
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 839183401
	EQUAL
	IFJMPREF {
		CALL $supportsInterface$
	}
	DUP
	PUSHINT 1118824496
	EQUAL
	IFJMPREF {
		CALL $getName$
	}
	DUP
	PUSHINT 2100606476
	EQUAL
	IFJMPREF {
		CALL $getJSONInfo$
	}
}
